from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram import F
from keyboard.inline import start_kb
from keyboard.reply import keyboard , Calculator , keyboard_start , Kursik , Nach_Calculator
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv
import os

import requests
load_dotenv()

class CurrencyStates(StatesGroup):
    waiting_for_currency_code = State()
    waiting_for_amount = State()
    waiting_for_target_currency = State()
    waiting_for_operation = State()
    waiting_for_value = State()


KURSA = {"AED":0.04694,"AFN":0.882935,"ALL":1.077203,"AMD":4.907809,"ANG":0.022872,"AOA":11.719052,"ARS":16.121687,"AUD":0.019795,"AWG":0.023004,"AZN":0.021572,"BAM":0.021575,"BBD":0.025805,"BDT":1.551534,"BGN":0.021567,"BHD":0.004819,"BIF":38.086213,"BMD":0.01278,"BND":0.016443,"BOB":0.088316,"BRL":0.071177,"BSD":0.012781,"BTC":1.08125e-7,"BTN":1.099839,"BWP":0.172661,"BYN":0.041826,"BYR":250.483577,"BZD":0.025673,"CAD":0.017597,"CDF":36.88243,"CHF":0.010284,"CLF":0.000322,"CLP":12.359574,"CNY":0.091746,"CNH":0.091833,"COP":51.298014,"CRC":6.448877,"CUC":0.01278,"CUP":0.338664,"CVE":1.216352,"CZK":0.271948,"DJF":2.27598,"DKK":0.082373,"DOP":0.768872,"DZD":1.663713,"EGP":0.631583,"ERN":0.191697,"ETB":1.773808,"EUR":0.011038,"FJD":0.028934,"FKP":0.009519,"GBP":0.009542,"GEL":0.03463,"GGP":0.009519,"GHS":0.133236,"GIP":0.009519,"GMD":0.913779,"GNF":110.90737,"GTQ":0.098067,"GYD":2.672887,"HKD":0.100307,"HNL":0.334487,"HRK":0.083152,"HTG":1.678061,"HUF":4.405317,"IDR":208.945477,"ILS":0.042922,"IMP":0.009519,"INR":1.100082,"IQD":16.743108,"IRR":538.347999,"ISK":1.56514,"JEP":0.009519,"JMD":2.048929,"JOD":0.009061,"JPY":1.900742,"KES":1.651218,"KGS":1.117589,"KHR":51.229189,"KMF":5.409038,"KPW":11.501402,"KRW":17.815767,"KWD":0.003907,"KYD":0.010651,"KZT":6.825815,"LAK":275.616128,"LBP":1145.162121,"LKR":3.851753,"LRD":2.562563,"LSL":0.228848,"LTL":0.037735,"LVL":0.00773,"LYD":0.069507,"MAD":0.115833,"MDL":0.217272,"MGA":57.141947,"MKD":0.679079,"MMK":26.824428,"MNT":45.831682,"MOP":0.10333,"MRU":0.508416,"MUR":0.584048,"MVR":0.196859,"MWK":22.161905,"MXN":0.240472,"MYR":0.054269,"MZN":0.817388,"NAD":0.228848,"NGN":19.543214,"NIO":0.470369,"NOK":0.132093,"NPR":1.759725,"NZD":0.021625,"OMR":0.004914,"PAB":0.012781,"PEN":0.045339,"PGK":0.0537,"PHP":0.731846,"PKR":3.641224,"PLN":0.046966,"PYG":98.92752,"QAR":0.0466,"RON":0.056004,"RSD":1.292917,"RUB":1,"RWF":18.367054,"SAR":0.047935,"SBD":0.106145,"SCR":0.187651,"SDG":7.674243,"SEK":0.124919,"SGD":0.016447,"SHP":0.010043,"SLE":0.289464,"SLL":267.985529,"SOS":7.3038,"SRD":0.47443,"STD":264.515527,"SVC":0.111834,"SYP":166.160673,"SZL":0.228809,"THB":0.415739,"TJS":0.122185,"TMT":0.044857,"TND":0.037644,"TOP":0.029931,"TRY":0.514799,"TTD":0.086761,"TWD":0.376173,"TZS":33.355213,"UAH":0.535071,"UGX":45.790381,"USD":0.01278,"UYU":0.517031,"UZS":163.316452,"VES":1.494787,"VND":334.318897,"VUV":1.528919,"WST":0.035274,"XAF":7.236035,"XAG":0.000338,"XAU":3.842963e-6,"XCD":0.034538,"XDR":0.008969,"XOF":7.235972,"XPF":1.315577,"YER":3.084397,"ZAR":0.228996,"ZMK":115.033327,"ZMW":0.298749,"ZWL":4.115082}


key = os.getenv ("Curs")
getEUR = os.getenv ("get1")
getUSD = os.getenv ("get2")
getCNY = os.getenv ("get3")
getJPY = os.getenv ("get4")
getAED = os.getenv ("get5")
getBYN = os.getenv ("get6")
getKurs = os.getenv ('get7')
KursRUB = os.getenv('KursRUB')
command_router = Router()


deals = []

@command_router.message(Command("start"))
async def command_start_handler(message: Message) -> None:
    await message.answer("–ü—Ä–∏–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –º–µ–Ω—è –∑–æ–≤—É—Ç - ValutaObmenshikBot", reply_markup=keyboard_start )


@command_router.message(F.text =="üîôCANCELüîô")
async def command_start_handler(message: Message) -> None:
    await message.answer("üîô–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—á–∞–ª—Éüîô", reply_markup=keyboard_start)

@command_router.message(F.text =="üìÑ–æ –±–æ—Ç–µüìÑ")
async def about(message:Message) -> None:
    await message.answer(f"–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –≤–∞–ª—é—Ç –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ RUB\n–ê —Ç–∞–∫–∂–µ –±–æ—Ç –º–æ–∂–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤–∞–ª—é—Ç—É –ø–æ –∞–∫—Ç–∞–ª—å–Ω–æ–º—É –∫—É—Ä—Å—É –≤ –≤–∏–¥–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞")

@command_router.message(F.text =="üÜò–ø–æ–º–æ—â—åüÜò")
async def help(message:Message) -> None:
    await message.answer("""
üÜò–ø–æ–º–æ—â—åüÜò - helps to know more commands 
üìÑ–æ –±–æ—Ç–µüìÑ - helps to know functions of the bot 
üìã–º–µ–Ω—éüìã - this is a menu
""")

@command_router.message(F.text.lower() == "üìã–º–µ–Ω—éüìã")
async def menu(message:Message) -> None:
    await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ :\n 1 - üí±–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤–∞–ª—é—Çüí±\n 2 - üîé–ü—Ä–æ—Å—Ç–æ—Ç—Ä –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞üîé\n 3 - ‚ÄºÔ∏è–ì–¥–µ –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å –≤–∞–ª—é—Ç—É‚ÄºÔ∏è", reply_markup=keyboard)


@command_router.message(F.text.lower() == "‚öñÔ∏è–ø—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞‚öñÔ∏è")
async def Kurs(message:Message) -> None:
    await message.answer("–°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞–ª—é—Ç—ã :\n 1 - üá∑üá∫–†–£–ë –∏ –ï–í–†–ûüá™üá∫ |\n 2 - üá∑üá∫–†–£–ë –∏ –î–û–õ–õ–ê–†üá∫üá∏ |\n 3 - üá∑üá∫–†–£–ë –∏ –Æ–ê–ù–¨üá®üá≥ |\n 4 - üá∑üá∫–†–£–ë –∏ –ô–ï–ù–êüáØüáµ |\n 5 - üá∑üá∫–†–£–ë –∏ –î–ò–†–•–ê–ú–´üá¶üá™  |\n 6 - üá∑üá∫–†–£–ë –∏ –ë–µ–ª–†–£–ëüáßüáæ |\n MORE - –ª—é–±–∞—è –≤–∞–ª—é—Ç–∞  ", reply_markup=Kursik)

@command_router.message(F.text.lower() == "‚ÄºÔ∏è–≥–¥–µ –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å –≤–∞–ª—é—Ç—É‚ÄºÔ∏è")
async def Prosmotr(message:Message) -> None:
    await message.answer("‚öôÔ∏è–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ‚öôÔ∏è")





@command_router.message(F.text == "MORE")
async def cmd_more(message: Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ—Ö–±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥ –≤–∞–ª—é—Ç—ã, –∫—É—Ä—Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å\n"
        "–ü—Ä–∏–º–µ—Ä: USD\n"
    )
    await state.set_state(CurrencyStates.waiting_for_currency_code)

@command_router.message(CurrencyStates.waiting_for_currency_code)
async def process_currency_code(message: Message, state: FSMContext):
    currency_code = message.text.upper().strip()
    
    if len(currency_code) == 3 and currency_code.isalpha():
        if currency_code in KURSA:
            rate = KURSA[currency_code]
            await message.answer(
                f"–ö—É—Ä—Å {currency_code}:\n"
                f"üá∑üá∫ RUB = {rate:.2f} {currency_code}üá∫üá≥\n"
                f"üá∫üá≥{currency_code} = {1/rate:.2f} RUBüá∑üá∫"
            )
        else:
            try:
                response = requests.get(KursRUB)
                t = response.json()
                if currency_code in t['rates']:
                    rate = t['rates'][currency_code]
                    rub_per_curr = 1 / rate
                    await message.answer(
                        f"–ö—É—Ä—Å {currency_code} (–∞–∫—Ç—É–∞–ª—å–Ω—ã–π):\n"
                        f"üá∑üá∫RUB = {rate:.2f} {currency_code}üá∫üá≥\n"
                        f"üá∫üá≥{currency_code} = {rub_per_curr:.2f} RUBüá∑üá∫"
                    )
                else:
                    await message.answer("–í–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥.")
                    return
            except:
                await message.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
        
    await state.clear()






@command_router.message(F.text.lower() == "üí±–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤–∞–ª—é—Çüí±")
async def calculator_menu(message: Message, state: FSMContext):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:\n1. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å RUB –≤ –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É üá∑üá∫->üá∫üá≥\n2. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É –≤ RUB üá∫üá≥->üá∑üá∫",
        reply_markup=Nach_Calculator
    )
    await state.set_state(CurrencyStates.waiting_for_operation)

@command_router.message(CurrencyStates.waiting_for_operation)
async def process_calc_operation(message: Message, state: FSMContext):
    operation = message.text
    
    if operation in ['1', '2']:
        await state.update_data(operation=operation)
        if operation == '1':
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ RUB –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
        elif operation == '2':
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: USD):")     
        await state.set_state(CurrencyStates.waiting_for_value)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2")

@command_router.message(CurrencyStates.waiting_for_value)
async def process_calc_values(message: Message, state: FSMContext):
    data = await state.get_data()
    operation = data['operation']
    user_input = message.text.upper()
    
    try:
        if operation == '1':
            amount = float(user_input)
            await state.update_data(amount=amount)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ü–µ–ª–µ–≤–æ–π –≤–∞–ª—é—Ç—ã \n(–Ω–∞–ø—Ä–∏–º–µ—Ä: USD):")
            await state.set_state(CurrencyStates.waiting_for_target_currency)
            
        elif operation == '2':
            if len(user_input) == 3 and user_input.isalpha():
                await state.update_data(currency=user_input)
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –≤–∞–ª—é—Ç–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ RUB:")
                await state.set_state(CurrencyStates.waiting_for_amount)
            else:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ –≤–∞–ª—é—Ç—ã (3 –±—É–∫–≤—ã)")
                
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")

@command_router.message(CurrencyStates.waiting_for_amount)
async def process_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        data = await state.get_data()
        currency = data['currency']
        
        if currency in KURSA:
            rate = KURSA[currency]
            result = amount / rate
            await message.answer(f"{amount} {currency} = {result:.2f} RUB")
        else:
            await message.answer("–í–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ –≤–∞–ª—é—Ç—ã.")
        
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")

@command_router.message(CurrencyStates.waiting_for_target_currency)
async def process_target_currency(message: Message, state: FSMContext):
    currency = message.text.upper()
    data = await state.get_data()
    amount = data['amount']
    
    if len(currency) == 3 and currency.isalpha():
        if currency in KURSA:
            rate = KURSA[currency]
            result = amount * rate
            await message.answer(f"{amount} RUB = {result:.2f} {currency}")
        else:
            await message.answer("–í–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ –≤–∞–ª—é—Ç—ã.")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ –≤–∞–ª—é—Ç—ã (3 –±—É–∫–≤—ã)")
    
    await state.clear()






@command_router.message(F.text == "–∫–æ–¥—ã –≤–∞–ª—é—Ç")
async def command_list_currencies_handler(message: Message) -> None:
    await message.answer(""" 
- <code>AED</code> ‚Äì –î–∏—Ä—Ö–∞–º –û–ê–≠  
- <code>AFN</code> ‚Äì –ê—Ñ–≥–∞–Ω–∏  
- <code>AMD</code> ‚Äì –ê—Ä–º—è–Ω—Å–∫–∏–π –¥—Ä–∞–º  
- <code>ANG</code> ‚Äì –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—Å–∫–∏–π –≥—É–ª—å–¥–µ–Ω  
- <code>AOA</code> ‚Äì –ê–Ω–≥–æ–ª—å—Å–∫–∞—è –∫–≤–∞–Ω–∑–∞  
- <code>ARS</code> ‚Äì –ê—Ä–≥–µ–Ω—Ç–∏–Ω—Å–∫–æ–µ –ø–µ—Å–æ  
- <code>AUD</code> ‚Äì –ê–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä  
- <code>BHD</code> ‚Äì –ë–∞—Ö—Ä–µ–π–Ω—Å–∫–∏–π –¥–∏–Ω–∞—Ä    
- <code>BRL</code> ‚Äì –ë—Ä–∞–∑–∏–ª—å—Å–∫–∏–π —Ä–µ–∞–ª  
- <code>BTC</code> ‚Äì –ë–∏—Ç–∫–æ–∏–Ω (–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞)  
- <code>BYN</code> ‚Äì –ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å  
- <code>CAD</code> ‚Äì –ö–∞–Ω–∞–¥—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä  
- <code>CHF</code> ‚Äì –®–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫  
- <code>CLP</code> ‚Äì –ß–∏–ª–∏–π—Å–∫–æ–µ –ø–µ—Å–æ  
- <code>CNY</code> ‚Äì –ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å  
- <code>COP</code> ‚Äì –ö–æ–ª—É–º–±–∏–π—Å–∫–æ–µ –ø–µ—Å–æ  
- <code>CZK</code> ‚Äì –ß–µ—à—Å–∫–∞—è –∫—Ä–æ–Ω–∞  
- <code>DJF</code> ‚Äì –î–∂–∏–±—É—Ç–∏–π—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫  
- <code>DKK</code> ‚Äì –î–∞—Ç—Å–∫–∞—è –∫—Ä–æ–Ω–∞  
- <code>DOP</code> ‚Äì –î–æ–º–∏–Ω–∏–∫–∞–Ω—Å–∫–æ–µ –ø–µ—Å–æ  
- <code>DZD</code> ‚Äì –ê–ª–∂–∏—Ä—Å–∫–∏–π –¥–∏–Ω–∞—Ä  
- <code>EGP</code> ‚Äì –ï–≥–∏–ø–µ—Ç—Å–∫–∏–π —Ñ—É–Ω—Ç  
- <code>EUR</code> ‚Äì –ï–≤—Ä–æ  
- <code>GBP</code> ‚Äì –§—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤  
- <code>GEL</code> ‚Äì –ì—Ä—É–∑–∏–Ω—Å–∫–∏–π –ª–∞—Ä–∏  
- <code>GNF</code> ‚Äì –ì–≤–∏–Ω–µ–π—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫  
- <code>HKD</code> ‚Äì –ì–æ–Ω–∫–æ–Ω–≥—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä  
- <code>HNL</code> ‚Äì –ì–æ–Ω–¥—É—Ä–∞—Å—Å–∫–∞—è –ª–µ–º–ø–∏—Ä–∞  
- <code>HTG</code> ‚Äì –ì–∞–∏—Ç—è–Ω—Å–∫–∏–π –≥—É—Ä–¥  
- <code>HUF</code> ‚Äì –í–µ–Ω–≥–µ—Ä—Å–∫–∏–π —Ñ–æ—Ä–∏–Ω—Ç  
- <code>IDR</code> ‚Äì –ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∞—è —Ä—É–ø–∏—è  
- <code>ILS</code> ‚Äì –ò–∑—Ä–∞–∏–ª—å—Å–∫–∏–π —à–µ–∫–µ–ª—å  
- <code>INR</code> ‚Äì –ò–Ω–¥–∏–π—Å–∫–∞—è —Ä—É–ø–∏—è  
- <code>IQD</code> ‚Äì –ò—Ä–∞–∫—Å–∫–∏–π –¥–∏–Ω–∞—Ä  
- <code>IRR</code> ‚Äì –ò—Ä–∞–Ω—Å–∫–∏–π —Ä–∏–∞–ª  
- <code>ISK</code> ‚Äì –ò—Å–ª–∞–Ω–¥—Å–∫–∞—è –∫—Ä–æ–Ω–∞  
- <code>JPY</code> ‚Äì –Ø–ø–æ–Ω—Å–∫–∞—è –∏–µ–Ω–∞  
- <code>KGS</code> ‚Äì –ö–∏—Ä–≥–∏–∑—Å–∫–∏–π —Å–æ–º  
- <code>KMF</code> ‚Äì –ö–æ–º–æ—Ä—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫  
- <code>KPW</code> ‚Äì –°–µ–≤–µ—Ä–æ–∫–æ—Ä–µ–π—Å–∫–∞—è –≤–æ–Ω–∞  
- <code>KRW</code> ‚Äì –Æ–∂–Ω–æ–∫–æ—Ä–µ–π—Å–∫–∞—è –≤–æ–Ω–∞  
- <code>KWD</code> ‚Äì –ö—É–≤–µ–π—Ç—Å–∫–∏–π –¥–∏–Ω–∞—Ä  
- <code>KZT</code> ‚Äì –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π —Ç–µ–Ω–≥–µ  
- <code>LBP</code> ‚Äì –õ–∏–≤–∞–Ω—Å–∫–∏–π —Ñ—É–Ω—Ç  
- <code>LRD</code> ‚Äì –õ–∏–±–µ—Ä–∏–π—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä  
- <code>LYD</code> ‚Äì –õ–∏–≤–∏–π—Å–∫–∏–π –¥–∏–Ω–∞—Ä  
- <code>MAD</code> ‚Äì –ú–∞—Ä–æ–∫–∫–∞–Ω—Å–∫–∏–π –¥–∏—Ä—Ö–∞–º  
- <code>MDL</code> ‚Äì –ú–æ–ª–¥–∞–≤—Å–∫–∏–π –ª–µ–π  
- <code>MGA</code> ‚Äì –ú–∞–ª–∞–≥–∞—Å–∏–π—Å–∫–∏–π –∞—Ä–∏–∞—Ä–∏  
- <code>MKD</code> ‚Äì –ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏–π –¥–µ–Ω–∞—Ä  
- <code>MMK</code> ‚Äì –ú—å—è–Ω–º–∞–Ω—Å–∫–∏–π –∫—å—è—Ç  
- <code>MNT</code> ‚Äì –ú–æ–Ω–≥–æ–ª—å—Å–∫–∏–π —Ç—É–≥—Ä–∏–∫  
- <code>MVR</code> ‚Äì –ú–∞–ª—å–¥–∏–≤—Å–∫–∞—è —Ä—É—Ñ–∏—è  
- <code>MWK</code> ‚Äì –ú–∞–ª–∞–≤–∏–π—Å–∫–∞—è –∫–≤–∞—á–∞  
- <code>MXN</code> ‚Äì –ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–æ–µ –ø–µ—Å–æ  
- <code>MYR</code> ‚Äì –ú–∞–ª–∞–π–∑–∏–π—Å–∫–∏–π —Ä–∏–Ω–≥–≥–∏—Ç  
- <code>NGN</code> ‚Äì –ù–∏–≥–µ—Ä–∏–π—Å–∫–∞—è –Ω–∞–π—Ä–∞  
- <code>NOK</code> ‚Äì –ù–æ—Ä–≤–µ–∂—Å–∫–∞—è –∫—Ä–æ–Ω–∞  
- <code>NPR</code> ‚Äì –ù–µ–ø–∞–ª—å—Å–∫–∞—è —Ä—É–ø–∏—è  
- <code>OMR</code> ‚Äì –û–º–∞–Ω—Å–∫–∏–π —Ä–∏–∞–ª  
- <code>PHP</code> ‚Äì –§–∏–ª–∏–ø–ø–∏–Ω—Å–∫–æ–µ –ø–µ—Å–æ  
- <code>PKR</code> ‚Äì –ü–∞–∫–∏—Å—Ç–∞–Ω—Å–∫–∞—è —Ä—É–ø–∏—è  
- <code>PLN</code> ‚Äì –ü–æ–ª—å—Å–∫–∏–π –∑–ª–æ—Ç—ã–π  
- <code>PYG</code> ‚Äì –ü–∞—Ä–∞–≥–≤–∞–π—Å–∫–∏–π –≥—É–∞—Ä–∞–Ω–∏  
- <code>QAR</code> ‚Äì –ö–∞—Ç–∞—Ä—Å–∫–∏–π —Ä–∏–∞–ª  
- <code>RON</code> ‚Äì –†—É–º—ã–Ω—Å–∫–∏–π –ª–µ–π  
- <code>RSD</code> ‚Äì –°–µ—Ä–±—Å–∫–∏–π –¥–∏–Ω–∞—Ä  
- <code>RUB</code> ‚Äì –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å  
- <code>SAR</code> ‚Äì –°–∞—É–¥–æ–≤—Å–∫–∏–π —Ä–∏—è–ª  
- <code>SBD</code> ‚Äì –î–æ–ª–ª–∞—Ä –°–æ–ª–æ–º–æ–Ω–æ–≤—ã—Ö –æ—Å—Ç—Ä–æ–≤–æ–≤  
- <code>SCR</code> ‚Äì –°–µ–π—à–µ–ª—å—Å–∫–∞—è —Ä—É–ø–∏—è  
- <code>SDG</code> ‚Äì –°—É–¥–∞–Ω—Å–∫–∏–π —Ñ—É–Ω—Ç  
- <code>SEK</code> ‚Äì –®–≤–µ–¥—Å–∫–∞—è –∫—Ä–æ–Ω–∞  
- <code>SGD</code> ‚Äì –°–∏–Ω–≥–∞–ø—É—Ä—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä  
- <code>SYP</code> ‚Äì –°–∏—Ä–∏–π—Å–∫–∏–π —Ñ—É–Ω—Ç  
- <code>TJS</code> ‚Äì –¢–∞–¥–∂–∏–∫—Å–∫–∏–π —Å–æ–º–æ–Ω–∏  
- <code>TMT</code> ‚Äì –¢—É—Ä–∫–º–µ–Ω—Å–∫–∏–π –º–∞–Ω–∞—Ç  
- <code>TND</code> ‚Äì –¢—É–Ω–∏—Å—Å–∫–∏–π –¥–∏–Ω–∞—Ä   
- <code>TRY</code> ‚Äì –¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞   
- <code>TWD</code> ‚Äì –ù–æ–≤—ã–π —Ç–∞–π–≤–∞–Ω—å—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä  
- <code>UAH</code> ‚Äì –£–∫—Ä–∞–∏–Ω—Å–∫–∞—è –≥—Ä–∏–≤–Ω–∞  
- <code>USD</code> ‚Äì –î–æ–ª–ª–∞—Ä –°–®–ê  
- <code>UYU</code> ‚Äì –£—Ä—É–≥–≤–∞–π—Å–∫–æ–µ –ø–µ—Å–æ  
- <code>UZS</code> ‚Äì –£–∑–±–µ–∫—Å–∫–∏–π —Å—É–º   
- <code>VND</code> ‚Äì –í—å–µ—Ç–Ω–∞–º—Å–∫–∏–π –¥–æ–Ω–≥  
- <code>XAG</code> ‚Äì –°–µ—Ä–µ–±—Ä–æ (—Ç—Ä–æ–π—Å–∫–∞—è —É–Ω—Ü–∏—è)  
- <code>XAU</code> ‚Äì –ó–æ–ª–æ—Ç–æ (—Ç—Ä–æ–π—Å–∫–∞—è —É–Ω—Ü–∏—è)  
""", parse_mode="HTML")






@command_router.message(F.text=="EUR")
async def get_moneyC(message: Message):
    response = requests.get(KursRUB)
    t = response.json()
    eur_rate = t['rates']['EUR']
    rub_per_eur = 1 / eur_rate
    message_text = f" üá∑üá∫–†—É–±–ª—å —Ä–∞–≤–µ–Ω {eur_rate:.2f}üá™üá∫|\nüá™üá∫–ï–≤—Ä–æ —Ä–∞–≤–Ω–æ {rub_per_eur:.2f}üá∑üá∫|"
    await message.answer(text = message_text)
    await state.clear()

@command_router.message(F.text=="USD")
async def get_moneyC(message: Message):
    response = requests.get(KursRUB)
    t = response.json()
    usd_rate = t['rates']['USD']
    rub_per_usd = 1 / usd_rate
    message_text = f" üá∑üá∫–†—É–±–ª—å —Ä–∞–≤–µ–Ω {usd_rate:.2f}üá∫üá∏|\nüá∫üá∏–î–æ–ª–ª–∞—Ä —Ä–∞–≤–µ–Ω {rub_per_usd:.2f}üá∑üá∫|"
    await message.answer(text = message_text) 
    await state.clear()  

@command_router.message(F.text=="CNY")
async def get_moneyC(message: Message):
    response = requests.get(KursRUB)
    t = response.json()
    cny_rate = t['rates']['CNY']
    rub_per_cny = 1 / cny_rate
    message_text = f" üá∑üá∫–†—É–±–ª—å —Ä–∞–≤–µ–Ω {cny_rate:.2f}üá®üá≥|\nüá®üá≥–Æ–∞–Ω—å —Ä–∞–≤–µ–Ω {rub_per_cny:.2f}üá∑üá∫|"
    await message.answer(text = message_text)
    await state.clear()

@command_router.message(F.text=="JPY")
async def get_moneyC(message: Message):
    response = requests.get(KursRUB)
    t = response.json()
    jpy_rate = t['rates']['JPY']
    rub_per_jpy = 1 / jpy_rate
    message_text = f" üá∑üá∫–†—É–±–ª—å —Ä–∞–≤–µ–Ω {jpy_rate:.2f}üáØüáµ|\nüáØüáµ–ô–µ–Ω–∞ —Ä–∞–≤–Ω–∞ {rub_per_jpy:.2f}üá∑üá∫|"
    await message.answer(text = message_text)
    await state.clear()

@command_router.message(F.text=="AED")
async def get_moneyC(message: Message):
    response = requests.get(KursRUB)
    t = response.json()
    aed_rate = t['rates']['AED']
    rub_per_aed = 1 / aed_rate
    message_text = f" üá∑üá∫–†—É–±–ª—å —Ä–∞–≤–µ–Ω {aed_rate:.2f}üá¶üá™|\nüá¶üá™–î–∏—Ä—Ö–∞–º–º–∞ —Ä–∞–≤–Ω–∞ {rub_per_aed:.2f}üá∑üá∫|"
    await message.answer(text = message_text)
    await state.clear()

@command_router.message(F.text=="BYN")
async def get_moneyC(message: Message):
    response = requests.get(KursRUB)
    t = response.json()
    byn_rate = t['rates']['BYN']
    rub_per_byn = 1 / byn_rate
    message_text = f" üá∑üá∫–†—É–±–ª—å —Ä–∞–≤–µ–Ω {byn_rate:.2f}üáßüáæ|\nüáßüáæ–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π –†—É–±–ª—å —Ä–∞–≤–µ–Ω {rub_per_byn:.2f}üá∑üá∫|"
    await message.answer(text = message_text)
    await state.clear()


@command_router.message(Command("deal_create"))
async def deal_create(message:Message):
    a = message.text
    a = a.replace("/deal_create", "")
    a = a.replace(" dfdfd", "")
    await message.answer("What time will i remind it to you?")
    print(a)

@command_router.message(Command("style"))
async def send_styles(message:Message):
    text = (
        "<b>bold</b> -- <strong>bold</strong>\n"
        "<i>italic</i> -- <em>italic</em>\n"
        "<u>underline</u> -- <ins>underline</ins>\n"
        "<s>strikethrough</s> -- <strike>strikethrough</strike> --  <del>strikethrough</del>\n"
        "<span class=\"tg-spoiler\">spoiler</span> -- <tg-spoiler>spoiler</tg-spoiler>\n"
        "<b>bold   <i>italic bold   <s>italic bold strikethrough "
        "<span class=\"tg-spoiler\">italic bold strikethrough spoiler</span>"
        "</s> <u>underline italic bold</u></i> bold</b>\n"
        "<a href=\"http://www.example.com/\">inline URL</a>\n"
        "<code>inline fixed-width code</code>\n"
        "<pre>pre-formatted fixed-width code block</pre>\n"
        "<pre><code class=\"language-python\">pre-formatted fixed-width code block written in the Python programming "
        "language</code></pre>"
    )
    await message.answer(text = text, parse_mode="HTML")


